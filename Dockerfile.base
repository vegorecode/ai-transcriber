FROM pytorch/pytorch:2.7.1-cuda12.8-cudnn9-runtime AS base

SHELL ["/bin/bash", "-c"]
WORKDIR /app

# 2) Системные зависимости
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.11 python3.11-dev python3.11-distutils python3-pip \
    ffmpeg git ca-certificates wget libsndfile1 && \
    rm -rf /var/lib/apt/lists/*

# (опционально) alias python -> python3.11
RUN ln -sf /usr/bin/python3.11 /usr/bin/python

ENV HF_HOME=/root/.cache/huggingface \
    TRANSFORMERS_CACHE=/root/.cache/huggingface \
    TORCH_HOME=/root/.cache/torch \
    CT2_USE_EXPERIMENTAL_PACKED_GEMM=1 \
    HF_HUB_ENABLE_HF_TRANSFER=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_PREFER_BINARY=1 \
    PIP_ROOT_USER_ACTION=ignore \
    TRANSFORMERS_NO_TORCHVISION=1

# 3) pip bootstrap
RUN python3 -m pip install --upgrade pip setuptools wheel

# 5) Остальные зависимости
COPY builder/requirements.txt /builder/requirements.txt
RUN python3 -m pip install --no-cache-dir -r /builder/requirements.txt

RUN python -m pip install --no-cache-dir "nvidia-cudnn-cu12==9.7.1.26" \
 && python - <<'PY'
import pathlib, nvidia.cudnn as m
libdir = (pathlib.Path(m.__file__).parent / "lib").resolve()
path = "/etc/ld.so.conf.d/cudnn.conf"
open(path, "w").write(str(libdir) + "\n")
print("cuDNN lib dir:", libdir)
PY
# обновляем кэш динамического загрузчика, чтобы *.so находились без LD_LIBRARY_PATH
RUN ldconfig

RUN python3 - <<'PY'
import os, ctypes
print("LD_LIBRARY_PATH=", os.environ.get("LD_LIBRARY_PATH"))
for lib in ("libcudnn.so.9","libcudnn_cnn.so.9","libcudnn_ops.so.9"):
    ctypes.CDLL(lib)
print("cuDNN 9 core/cnn/ops — OK")
import ctranslate2, torch
print("torch", torch.__version__, "ctranslate2", ctranslate2.__version__)
PY


# 6) Быстрые проверки
RUN python3 - <<'PY'
import torch, torchaudio, importlib
print("torch", torch.__version__, "CUDA:", torch.version.cuda)
print("torchaudio", torchaudio.__version__)
print("cuDNN version:", torch.backends.cudnn.version())
assert str(torch.backends.cudnn.version()).startswith("9"), "cuDNN must be v9.x"
import ctranslate2
print("ctranslate2", ctranslate2.__version__)
PY

# 7) sanity-check pyannote pipeline импорт
RUN python3 - <<'PY'
from pyannote.audio import Pipeline
print("pyannote.audio.Pipeline import OK")
PY

# 8) Предзагрузка моделей (если нужно)
COPY builder /builder
RUN chmod +x /builder/download_models.sh && sed -i 's/\r$//' /builder/download_models.sh
RUN --mount=type=secret,id=hf_token bash /builder/download_models.sh
